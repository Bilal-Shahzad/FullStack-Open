import React from 'react';
// import Bilal from './blank'; 
// function throwaway() {
//   return (
//     <div>
//       <h1>Welcome to My App</h1>
//       <Bilal > </Bilal>
//     </div>
//   );
// }
// export default throwaway;



const Filter = ({ searchTerm, handleSearchChange }) => {
  return (
    <div>
      filter shown with <input value={searchTerm} onChange={handleSearchChange} />
    </div>
  );
};

const PersonForm = ({ newName, newNumber, handleNameChange, handleNumberChange, addPerson }) => {
  return (
    <form onSubmit={addPerson}>
      <div>
        name: <input value={newName} onChange={handleNameChange} />
      </div>
      <div>
        number: <input value={newNumber} onChange={handleNumberChange} />
      </div>
      <div>
        <button type="submit">add</button>
      </div>
    </form>
  );
};

const Persons = ({ personsToShow }) => {
  return (
    <ul>
      {personsToShow.map((person) => (
        <li key={person.id}>
          {person.name} - {person.number}
        </li>
      ))}
    </ul>
  );
};

const App = () => {
  const [persons, setPersons] = useState([
    { name: 'Arto Hellas', number: '123-456-7890', id: 1 },
    { name: 'Ada Lovelace', number: '111-222-3333', id: 2 },
    { name: 'Dan Abramov', number: '444-555-6666', id: 3 },
    { name: 'Mary Poppendieck', number: '777-888-9999', id: 4 }
  ]);
  const [newName, setNewName] = useState('');
  const [newNumber, setNewNumber] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  const addPerson = (event) => {
    event.preventDefault();

    if (persons.some((person) => person.name === newName)) {
      alert(`${newName} is already added to the phonebook`);
      return;
    }

    const personObject = {
      name: newName,
      number: newNumber,
      id: persons.length + 1
    };

    setPersons(persons.concat(personObject));
    setNewName('');
    setNewNumber('');
  };

  const handleNameChange = (event) => {
    setNewName(event.target.value);
  };

  const handleNumberChange = (event) => {
    setNewNumber(event.target.value);
  };

  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  };

  const personsToShow = persons.filter((person) =>
    person.name.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div>
      <h2>Phonebook</h2>
      <Filter searchTerm={searchTerm} handleSearchChange={handleSearchChange} />
      <h3>Add a new</h3>
      <PersonForm
        newName={newName}
        newNumber={newNumber}
        handleNameChange={handleNameChange}
        handleNumberChange={handleNumberChange}
        addPerson={addPerson}
      />
      <h3>Numbers</h3>
      <Persons personsToShow={personsToShow} />
    </div>
  );
};

export default App;



// 2.6
// using usestate to make the persons array and the newName innput
// defined two event addPerson and handleNameChange for updating newName 


// 2.7
// use the some method to check if there is a matching name in the persons array 

// 2.8
// newNumber to manage the phone number input 
// handleNumberZChange that updates newNumber as the peron types 


// 2.9
// searchTerm to manage the search input field 
// added handleSearchChange that updates searchTerm 

// 2.10
// Filter, PersonForm and Persons got extracted from App 






<----- Notes ---- >
Resources and URLs: 
In REST, each data object is referred to as a resource and is associated with a unique URL. For example, the URL notes/3 would represent the resource with an ID of 3, assuming we are dealing with notes.Resources and URLs: In REST, each data object is referred to as a resource and is associated with a unique URL. For example, the URL notes/3 would represent the resource with an ID of 3, assuming we are dealing with notes.

HTTP Methods: 
HTTP methods are used to interact with resources. The GET method is used to fetch resources. For instance, an HTTP GET request to notes/3 would retrieve the note with ID 3. A GET request to the notes URL would retrieve a list of all notes.

Creating Resources: 
To create a new resource, you make an HTTP POST request to the collection URL, such as notes. The new resource's data is sent in the body of the request. This adheres to the REST convention.

JSON Format: 
JSON Server requires data to be sent in JSON format. This means the data should be a properly formatted JSON string. Additionally, the request should include the Content-Type header with the value application/json.



<--- Sending Data to Server ---->
A new note object is crafted, excluding the ID property to enable the server to generate IDs.

The axios.post method is utilized to send the note object to the server at the provided URL.

The server's response is logged to the console. The newly generated note is accessible through the response.data property.

The Network tab in Chrome developer tools can be employed to examine HTTP requests, ensuring header and payload accuracy.

The axios library automatically configures the Content-Type header as application/json since the sent data is in JavaScript object format.

The server's response is insightful for confirming data accuracy and any potential modifications made on the server's end.

To update the application's state with the recently created note, apply the setNotes function to append the response data to the existing notes using concat. Additionally, reset the note creation form by assigning an empty value to newNote.

It's imperative to remember that when manipulating state, such as using concat, a new instance of the list is produced, preserving immutability.

Challenges in debugging emerge from the asynchronous nature of communication. A deep comprehension of JavaScript runtime and React components is indispensable for effective debugging.

Examining the state of the backend server, usually via the browser, aids in validating data sent and received during interactions.

In upcoming segments of the course, the implementation of backend logic will be explored. While tools like Postman assist in debugging server applications, the current focus remains on browser inspection of the json-server state.

addNote = event => {
  event.preventDefault()
  const noteObject = {
    content: newNote,
    important: Math.random() < 0.5,
  }

  axios
    .post('http://localhost:3001/notes', noteObject)
    .then(response => {
      console.log(response)
    })
}

addNote = event => {
  event.preventDefault()
  const noteObject = {
    content: newNote,
    important: Math.random() > 0.5,
  }

  axios
    .post('http://localhost:3001/notes', noteObject)
    .then(response => {
      setNotes(notes.concat(response.data))
      setNewNote('')
    })
}
This condensed version encapsulates the key aspects of sending data to the server and managing the server's feedback, along with the pertinent code snippets.



<---- Changing the importance of Notes ----->

Modifying the Note Component:
Update the Note component to include a button for toggling note importance.
Set the button's event handler to the toggleImportance function passed via props.
The button's label reflects the current importance status.

Defining toggleImportanceOf in App Component:
In the App component, establish an initial version of the toggleImportanceOf event handler.
This function toggles the importance status of a note based on its unique ID.

Implementation in Note Component:
In the Note component, assign the toggle button's event handler to call toggleImportanceOf with the note's ID.
This allows for toggling importance when the button is clicked.

Details of toggleImportanceOf Function:
Construct the note's URL using its ID and send a PUT request to the server.
Retrieve the note to modify and create a new object with the importance status flipped.
Upon successful response, update the app's state using the response data to replace the modified note.

Reiteration of Previously Summarized Points:
Highlighted the importance of sending data to the server and receiving responses.
Discussed REST concepts, resource URLs, and HTTP methods (GET, POST, PUT) used for communication.
Emphasized JSON format requirement, proper use of the Content-Type header, and examining requests and responses in developer tools.
Showcased the use of template strings for dynamic strings.
Clarified the distinction between shallow and deep copies for object manipulation.
Underlined the significance of state management through immutability and React component debugging strategies.
Noted the value of inspecting the backend server's state through the browser.



<--- Extracting Communication with the Backend into a Separate Module --->

Creating the Service Module (notes.js):
Create a directory named services within src.
In this directory, create a file named notes.js.
Import axios and define the baseUrl for the backend API.
Implement functions getAll, create, and update that directly return promises.

import axios from 'axios';
const baseUrl = 'http://localhost:3001/notes';

const getAll = () => axios.get(baseUrl).then(response => response.data);

const create = newObject => axios.post(baseUrl, newObject).then(response => response.data);

const update = (id, newObject) => axios.put(`${baseUrl}/${id}`, newObject).then(response => response.data);

export default { 
  getAll, 
  create, 
  update 
};


Using the Module in the App Component:
Import the noteService module into the App component.
Replace direct axios calls with corresponding noteService method calls.
Update callback functions to handle the returned response data directly.

import noteService from './services/notes';

const App = () => {
  // ...

  useEffect(() => {
    noteService
      .getAll()
      .then(initialNotes => {
        setNotes(initialNotes);
      });
  }, []);

  const toggleImportanceOf = id => {
    const note = notes.find(n => n.id === id);
    const changedNote = { ...note, important: !note.important };

    noteService
      .update(id, changedNote)
      .then(returnedNote => {
        setNotes(notes.map(note => note.id !== id ? note : returnedNote));
      });
  }

  const addNote = event => {
    event.preventDefault();
    const noteObject = {
      content: newNote,
      important: Math.random() > 0.5
    };

    noteService
      .create(noteObject)
      .then(returnedNote => {
        setNotes(notes.concat(returnedNote));
        setNewNote('');
      });
  }

  // ...
};


Enhancing Promises Handling in the Module:
In the notes.js module, modify functions to return response data by chaining .then.
This simplifies module usage by focusing solely on necessary data retrieval.

const getAll = () => {
  const request = axios.get(baseUrl);
  return request.then(response => response.data);
}

const create = newObject => {
  const request = axios.post(baseUrl, newObject);
  return request.then(response => response.data);
}

const update = (id, newObject) => {
  const request = axios.put(`${baseUrl}/${id}`, newObject);
  return request.then(response => response.data);
}


Simulating Error Scenario:
To demonstrate handling errors, modify the getAll function in the note service to include a non-existent "hardcoded" note along with the retrieved notes.
const getAll = () => {
  const request = axios.get(baseUrl);
  const nonExisting = {
    id: 10000,
    content: 'This note is not saved to server',
    important: true,
  };
  return request.then(response => response.data.concat(nonExisting));
};


Using the catch Method:
Utilize the catch method to handle rejected promises, which occur when an HTTP request fails.
Place the catch handler at the end of a promise chain to catch errors in any part of the chain.

axios.get('http://example.com/probably_will_fail')
  .then(response => {
    console.log('success!');
  })
  .catch(error => {
    console.log('fail');
  });


Registering Error Handler in the App Component:
In the App component, include an error handler using the catch method after making an HTTP request with the note service
const toggleImportanceOf = id => {
  const note = notes.find(n => n.id === id);
  const changedNote = { ...note, important: !note.important };

  noteService
    .update(id, changedNote)
    .then(returnedNote => {
      setNotes(notes.map(note => note.id !== id ? note : returnedNote));
    })
    .catch(error => {
      alert(`The note '${note.content}' was already deleted from the server.`);
      setNotes(notes.filter(n => n.id !== id));
    });
};


Handling Deleted Notes:
In the error handler, display a message to the user using the alert method to inform them about the deleted note.
Remove the deleted note from the application's state using the filter method to create a new array excluding the deleted note.

alert(`The note '${note.content}' was already deleted from the server.`);
setNotes(notes.filter(n => n.id !== id));


Considerations for Advanced User Messaging:
While alert works, more advanced methods for displaying messages and notifications can be explored in serious React applications.
The approach of using alert can serve as a starting point and be replaced with more sophisticated methods later.



<---- Adding Stlyes to a React App (Part E) ------>

Introduction to Adding Styles:
The appearance of a React application can be improved by adding styles.
Two ways to attach styles are discussed: using a separate CSS file and inline styles.


Adding Styles with a Separate CSS File:
Create an index.css file in the src directory.
Import the CSS file in the main React component using import './index.css'.
Define CSS rules in the CSS file, specifying selectors and declarations.
Example: Styling all h1 tags with green text color and italic font style.

h1 {
  color: green;
  font-style: italic;
}


Using Class Selectors:
To apply styles to specific elements, use class selectors.
In React, use the className attribute instead of class.
Example: Adding a note class to a React component

<li className='note'>
  {/* Content */}
</li>



Better Error Reporting:
Implementing error notifications in React using a Notification component.
Set the errorMessage field in the app's state to display error messages.
Style the error message with the error class.

<div className="error">
  {errorMessage}
</div>


Error Message Logic:
When an error occurs, set an appropriate error message in the errorMessage state.
Start a timer to clear the error message after five seconds.


Inline Styles:
React allows inline styles defined as JavaScript objects.
Define styles using camelCase property names.
Example: Defining inline styles for a Footer component

const footerStyle = {
  color: 'green',
  fontStyle: 'italic',
  fontSize: 16
};

Limitations of Inline Styles:
Inline styles lack support for pseudo-selectors.
React's approach to styling differs from traditional CSS separation principles.


Structuring React Applications:
In React, components encapsulate HTML structure, JavaScript functionality, and styles.
Components are self-contained and reusable, following the component-based architecture.


Separation of Concerns:
While traditional web development separates CSS, HTML, and JavaScript, React encourages bundling them within components.

Handling Initialization Errors:
Initializing state variables appropriately is essential to avoid common initialization errors.
When dealing with an array of items, initializing with an empty array is a common practice.
However, for scenarios where the initial value should indicate "nothing," initializing with null can lead to errors.


Error Scenario with useState(null):
Initializing notes state with useState(null) can cause an error.
The error occurs because the code tries to call methods like map on a null value when rendering.


Conditional Rendering to Prevent Errors:
To prevent errors when initializing state variables to null, you can use conditional rendering.
Check if the state variable is still null and return null to avoid rendering until the data is loaded.

if (!notes) {
  return null;
}


Understanding useEffect Behavior:
The second parameter of useEffect controls when the effect is executed.
When the second parameter is an empty array [], the effect runs only after the first rendering.
It's suitable for initializing state values that require asynchronous data.


Example: Currency Exchange Rate Application:
Demonstrates how to use useEffect with a changing dependency (currency) to fetch data.
The effect is triggered after the first rendering and whenever currency changes.
Conditional logic in the effect prevents unnecessary API calls during the initial render.


Alternative Approach without useEffect:
In some cases, you can fetch data directly in the event handler without using useEffect.
This approach may be suitable for simple cases but may not be ideal for more complex scenarios.


Considerations for API Requests:
Using useEffect is beneficial for handling API requests and other asynchronous operations.
It ensures that requests are made at the right times and avoids unnecessary calls.


Task-specific Use of useEffect:
Not all tasks require the use of useEffect, and alternative approaches can be employed.
The decision to use useEffect depends on the specific requirements of the task.
